# https://community.home-assistant.io/t/creating-a-alarm-clock/410/315

# https://community.home-assistant.io/t/creating-a-alarm-clock/410/172

# Lullaby initiates with a HTTP Post command which is send from Tasker when I lay my phone on the wireless charger next to my bed. It first

# https://www.vcloudinfo.com/2017/11/building-worlds-greatest-smart-alarm.html



input_text:
  travel_destination_mha:
    name: Marcel Travel Destination

#  - alias: Set alarmtime_hour
#    trigger:
#      platform: mqtt
#      topic: "setHour"
#    action:
#       service: input_slider.select_value
#       data_template:
#        entity_id: input_slider.alarm_hour
#        value: '{{ trigger.payload}}'
#        
#  - alias: Set alarmtime_minutes
#    trigger:
#      platform: mqtt
#      topic: "setMinutes"
#    action:
#       service: input_slider.select_value
#       data_template:
#        entity_id: input_slider.alarm_minutes
#        value: '{{ trigger.payload}}'

input_boolean:
    alarm_clock:
      name: On/Off
#      initial: off
      icon: mdi:alarm

    work_selector:
      name: To Work Clock
#      initial: on
      icon: mdi:alarm      

    only_week_days:
      name: Only Week Days
#      initial: on
      icon: mdi:alarm  

#input_datetime:
#   schlaf_alarm_clock_time:
#     name: Alarm Time
#     has_date: false
#     has_time: true
#     initial: '07:25'

input_number: 
    alarm_hour:
      name: Alarm Hour
      icon: mdi:timer
      initial: 8
      min: 0
      max: 23
      step: 1
    alarm_minutes:
      name: Alarm Minutes
      icon: mdi:timer
      initial: 0
      min: 0
      max: 55
      step: 5
    prepare_ready_time:
      name: Ready Time Minutes
      icon: mdi:timer
      initial: 10
      min: 0
      max: 55
      step: 1      
    buffer_time:
      name: Buffer Time Minutes
      icon: mdi:timer
      initial: 8
      min: 0
      max: 55
      step: 1   
    first_notice_time:
      name: First Notice Time before Final Wake time
      icon: mdi:timer
      initial: 3
      min: 0
      max: 15
      step: 1   
    work_travel_reference_time:
      name: Reference Time for Work Travel
      icon: mdi:timer
      initial: 19
      min: 0
      max: 50
      step: 1  

    wakeup_duration:
      name: Fade In duration
      icon: mdi:clock-in
      initial: 20
      min: 5
      max: 60
      step: 5
    wakeup_max_brightness:
      name: Maximmum brightness
      icon: mdi:white-balance-sunny
      initial: 255
      min: 15
      max: 255
      step: 17
    wakeup_max_volume:
      name: Maximmum Volume
      icon: mdi:white-balance-sunny
      initial: 7
      min: 1
      max: 10
      step: 1



    test_volume:
      name: Volume for Testing
      initial: 0
      min: 0
      max: 1
      step: 0.01

    test_brightness:
      name: Brightness for Testing
      initial: 0
      min: 0
      max: 255
      step: 1

input_select:
    radio_wakeup:
      name: Wakeup Radio Station
      options:
        - Radio FM1
      initial: Radio FM1
      icon: mdi:radio         



group:
    dach_schlaf_alarm:
      name: Wake-Up Alarm Schlafzimmer
      entities:
      - sensor.time
      - input_boolean.alarm_clock
      - input_boolean.work_selector
      - input_boolean.only_week_days
      - input_number.alarm_hour
      - input_number.alarm_minutes
      - input_number.prepare_ready_time
      - input_number.buffer_time
      - input_number.first_notice_time
      - input_number.wakeup_duration
      - input_number.wakeup_max_brightness
      - input_number.wakeup_max_volume
      - input_number.test_volume
      - input_number.test_brightness
#      - input_datetime.schlaf_alarm_clock_time
      - sensor.alarmtime
      - sensor.time_until_alarm
      - sensor.time_of_next_alarm
      - sensor.time_to_leave
      - sensor.nextalarm
      - sensor.wakeup_first_notice_time
      - sensor.marcel_to_work
      - input_select.radio_wakeup
      - sensor.wakeup_start_time_fadein
      - sensor.wakeup_fadein_duration
      - sensor.wakeup_vol_increase_count
      - sensor.wakeup_light_increase_count

sensor:
    - platform: template
      sensors:

        alarmtime:
          friendly_name: Target Ready Time
          entity_id:
           - input_number.alarm_hour
           - input_number.alarm_minutes
          value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.alarm_hour") | int, states("input_number.alarm_minutes") | int) }}'
  
        nextalarm:
          friendly_name: Minutes until next alarm
          entity_id:
           - input_number.alarm_hour
           - input_number.alarm_minutes
           - input_number.prepare_ready_time
           - input_number.buffer_time
           - sensor.marcel_to_work
          value_template: >
            {% set relative_time =  (states.input_number.alarm_hour.state|float|multiply(60) + states.input_number.alarm_minutes.state|float) - ( now().hour|float|multiply(60) + now().minute ) - states.input_number.prepare_ready_time.state|float - states.sensor.marcel_to_work.state|float - states.input_number.buffer_time.state|float %}
            {%- if relative_time < 0 -%}
                    {{23*60+relative_time}}
            {%- else -%}
                    {{ relative_time-60 }}
            {%- endif %}

        reference_time_diff:
          friendly_name: Delay in Traffic
          entity_id:
           - input_number.work_travel_reference_time
           - sensor.marcel_to_work
          value_template: '{{ ( states.sensor.marcel_to_work.state|round(0) - states.input_number.work_travel_reference_time.state|round(0) ) }}'
          unit_of_measurement: 'min'

        time_until_alarm:
          friendly_name: Time until next alarm
          entity_id:
           - sensor.nextalarm
          value_template: '{{  (states.sensor.nextalarm.state.split(" ")[0] | int *60 ) | timestamp_custom("%H:%M") }}'

        time_of_next_alarm:
          friendly_name: Time of next alarm
          entity_id:
           - sensor.nextalarm
          value_template: >
            {% set next_time =  (states.sensor.nextalarm.state.split(" ")[0] | int *60 ) + (( now().hour|float|multiply(60) + now().minute ) | int *60 ) %}
            {{  next_time | timestamp_custom("%H:%M") }}

        time_to_leave:
          friendly_name: Time to Leave
          entity_id:
           - sensor.nextalarm
           - input_number.prepare_ready_time
          value_template: >
            {% set next_time =  (states.sensor.nextalarm.state.split(" ")[0] | int *60 ) + (( now().hour|float|multiply(60) + now().minute ) | int *60 ) + (states.input_number.prepare_ready_time.state|float| int *60) %}
            {{  next_time | timestamp_custom("%H:%M") }}


        wakeup_first_notice_time:
          friendly_name: First Notice start time
          entity_id:
           - sensor.nextalarm
           - input_number.first_notice_time
          value_template: >
            {% set next_time =  (states.sensor.nextalarm.state.split(" ")[0] | int *60 ) + (( now().hour|float|multiply(60) + now().minute ) | int *60 ) - (states.input_number.first_notice_time.state|float| int *60) %}
            {{  next_time | timestamp_custom("%H:%M") }}

        wakeup_start_time_fadein:
          friendly_name: Fade-in start time
          entity_id:
           - sensor.nextalarm
           - input_number.wakeup_duration
          value_template: >
            {% set next_time =  (states.sensor.nextalarm.state.split(" ")[0] | int *60 ) + (( now().hour|float|multiply(60) + now().minute ) | int *60 ) - (states.input_number.wakeup_duration.state|float| int *60) %}
            {{  next_time | timestamp_custom("%H:%M") }}




        #wakeup_alarm_time:
        #  friendly_name: 'Alarm time'
        #  value_template: '{% if states.input_number.wakeup_hour.state|length == 3 %}0{% endif %}{{ states.input_number.wakeup_hour.state | int }}:{% if states.input_number.wakeup_minutes.state|length == 3 %}0{% endif %}{{ states.input_number.wakeup_minutes.state | int }}'
#

        wakeup_fadein_duration:
          friendly_name: 'Fade-in duration'
          value_template: '{{ states.input_number.wakeup_duration.state | int }}'
          unit_of_measurement: 'min'


        # wakeup_start_time_fadein:
        #   friendly_name: 'Fade-in start time'
        #   value_template: >
        #     {% if states.sensor.time_of_next_alarm and states.input_number.wakeup_duration %}
        #     {% set alarmtime = states.sensor.time_of_next_alarm.state %}
        #     {% set alarm_hour = alarmtime.split(":")[0] | int %}
        #     {% set alarm_min = alarmtime.split(":")[1] | int %}
        #     {% set light_dur = states.input_number.wakeup_duration.state | int %}
        #     {% set alarm_min_light = alarm_min - light_dur %}
        #     {% if alarm_min_light  < 0 %}
        #     {% set alarm_min_light = alarm_min_light + 60 %}
        #     {% set alarm_hour_light = alarm_hour - 1 %}
        #     {% if alarm_hour_light < 0 %}{% set alarm_hour_light = 23 %}{% endif %}
        #     {% if alarm_hour_light < 10 %}0{% endif %}{{ alarm_hour_light}}:{% if alarm_min_light < 10 %}0{% endif %}{{ alarm_min_light }}
        #     {% else %}
        #     {% if alarm_hour < 10 %}0{% endif %}{{ alarm_hour }}:{% if alarm_min_light < 10 %}0{% endif %}{{ alarm_min_light }}
        #     {% endif %}
        #     {% endif %}


#      wakeup_light_current_brightness:
#        friendly_name: 'Light brightness'
#        value_template: >
#          {% if is_state('input_select.wakeup_light_id', 'light.light1') %}
#            {{states.light.light1.attributes.brightness | int}}
#          {% elif is_state('input_select.wakeup_light_id', 'light.light2') %}
#            {{states.light.light2.attributes.brightness | int}}
#          {% elif is_state('input_select.wakeup_light_id', 'light.light3') %}
#            {{states.light.light3.attributes.brightness | int}}
#  #add the other lights
#          {% else %}
#            0
#          {% endif %}

   #    wakeup_light_current_brightness:
   #      friendly_name: 'Light brightness'
   #      value_template: >
   #        {{states.light.dach_schlaf_licht_level.attributes.brightness | int}}



     #  wakeup_adjusted_transition:
     #    friendly_name: 'Adjusted transition'
     #    value_template: >
     #      {% if states.sensor.wakeup_light_current_brightness.state|int < ((((states.input_number.wakeup_max_brightness.state|int/(states.input_number.wakeup_max_brightness.state|int*states.input_number.transition.state|int/(states.input_number.wakeup_duration.state|int*60))|round)|round)*(states.input_number.transition.state | int + 1)) -states.input_number.wakeup_duration.state|int*60)*(((states.input_number.wakeup_max_brightness.state|int)*(states.input_number.transition.state | int))/(states.input_number.wakeup_duration.state | int * 60))|round %}
     #        {{states.input_number.transition.state|int-([states.input_number.transition.state|int-(states.input_number.wakeup_duration.state|int*60/(states.input_number.wakeup_max_brightness.state|int/((states.input_number.wakeup_max_brightness.state|int*states.input_number.transition.state|int/states.input_number.transition.state|int)|round)|round)|round),0]|max)}}
     #      {% else %}
     #        {{states.input_number.transition.state|int-([states.input_number.transition.state|int-(states.input_number.wakeup_duration.state|int*60/(states.input_number.wakeup_max_brightness.state|int/((states.input_number.wakeup_max_brightness.state|int*states.input_number.transition.state|int/states.input_number.transition.state|int)|round)|round)|round),0]|max) + 1}}
     #      {% endif %}


        wakeup_vol_increase_count:
          friendly_name: "Volume Increase Steps Time"
          value_template: >
            {{ ( (    (states.input_number.wakeup_duration.state | int * 60)  /  (states.input_number.wakeup_max_volume.state | int * 10 )    ) | round )   }}

        wakeup_light_increase_count:
          friendly_name: "Light Increase Steps Time"
          value_template: >
            {{ ( (    (states.input_number.wakeup_duration.state | int * 60)  /  (states.input_number.wakeup_max_brightness.state | int )    ) | round )   }}


            
    - platform: time_date
      display_options:
          - 'time'
          - 'date'
          - 'date_time'
          - 'time_date'
          - 'time_utc'
          - 'beat'


   
  



    #trigger:
    #  platform: template
    #  value_template: "{{ states('sensor.time') == (((state_attr('input_datetime.bedroom_alarm_clock_time' , 'timestamp')) - (15 * 60))|timestamp_custom('%H:%M', false)) }}"
    #  value_template: '{{ states.sensor.time.state == states.sensor.wakeup_start_time_fadein.state }}'

automation:

  - alias: 'Announce First Notice'
    trigger:
      platform: template
      #value_template: '{{ states.sensor.time.state == states.sensor.time_of_next_alarm.state }}'
      value_template: '{{ states.sensor.time.state == states.sensor.wakeup_first_notice_time.state }}'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.alarm_clock
          state: 'on'
        - condition: or
          conditions:
            - condition: state
              entity_id: input_boolean.only_week_days
              state: 'off'
            - condition: time
              weekday:
                - mon
                - tue
                - wed
                - thu
                - fri
    action:
      - service: notify.google_home
        data_template:
          message: 'Du hast noch {{ states.input_number.first_notice_time.state|round(0) }} Minuten bis du aus dem Bett musst! Die momentane Verspätung durch Verkehr beträgt {{ states.sensor.reference_time_diff.state|round(0) }} Minuten!' 

  - alias: 'Announce Last Notice'
    trigger:
      platform: template
      #value_template: '{{ states.sensor.time.state == states.sensor.time_of_next_alarm.state }}'
      value_template: '{{ states.sensor.time.state == states.sensor.time_of_next_alarm.state }}'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.alarm_clock
          state: 'on'
        - condition: or
          conditions:
            - condition: state
              entity_id: input_boolean.only_week_days
              state: 'off'
            - condition: time
              weekday:
                - mon
                - tue
                - wed
                - thu
                - fri
    action:
      - service: notify.google_home
        data_template:
          message: 'Du musst jetzt sofort aus dem Bett!' 


  - alias: 'Schlafzimmer Wakeup'
    trigger:
      platform: template
      #value_template: '{{ states.sensor.time.state == states.sensor.time_of_next_alarm.state }}'
      value_template: '{{ states.sensor.time.state == states.sensor.wakeup_start_time_fadein.state }}'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.alarm_clock
          state: 'on'
        - condition: or
          conditions:
            - condition: state
              entity_id: input_boolean.only_week_days
              state: 'off'
            - condition: time
              weekday:
                - mon
                - tue
                - wed
                - thu
                - fri
    action:
      - service: script.wakeup_room






script:


#  wakeup_room_initial:
#    alias: 'Wakeup initial'
#    sequence:
#      - service: light.turn_on
#        data_template:
#          entity_id: '{{ states.input_select.wakeup_light_id.state}}'
#          brightness: 0
#          rgb_color: [1,1,1]

  wakeup_room_sound_turnon:
    alias: 'Wakeup Sound turnon'
    sequence:
      
      - service: script.turn_off
        entity_id: script.wakeup_room_sound_iterate
      
      - service: input_number.set_value
        data_template:
          entity_id: input_number.test_volume
          value: "{{ states.input_number.test_volume.state|float + 0.01|float }}"

      - service: media_player.volume_set
        data_template:
          entity_id: media_player.schlafzimmer_speaker
          volume_level: '{{ states.input_number.test_volume.state|float }}'

      - delay: '00:00:{{states.sensor.wakeup_vol_increase_count.state|int}}'
      
      - service: script.turn_on
        entity_id: script.wakeup_room_sound_iterate


  wakeup_room_sound_iterate:
    alias: 'Wakeup sound iterate'
    sequence:
      - service: script.turn_off
        entity_id: script.wakeup_room_sound_turnon
      - service_template: >
          {% if states.input_number.test_volume.state|int < states.input_number.wakeup_max_volume.state|int %}
            script.turn_on
          {% else %}
            script.turn_off
          {% endif %}
        data:
          entity_id: script.wakeup_room_sound_turnon







  wakeup_room_light_turnon:
    alias: 'Wakeup Light turnon'
    sequence:

      - service: script.turn_off
        entity_id: script.wakeup_room_light_iterate
      
      - service: input_number.set_value
        data_template:
          entity_id: input_number.test_brightness
          value: "{{ states.input_number.test_brightness.state|int + 1 }}"

      - service: light.turn_on
        data_template:
          entity_id: light.dach_schlaf_licht_level
          brightness: "{{ states.input_number.test_brightness.state|int }}"

      - delay: '00:00:{{states.sensor.wakeup_light_increase_count.state|int}}'
      
      - service: script.turn_on
        entity_id: script.wakeup_room_light_iterate



  wakeup_room_light_iterate:
    alias: 'Wakeup light iterate'
    sequence:
      - service: script.turn_off
        entity_id: script.wakeup_room_light_turnon
      - service_template: >
          {% if states.input_number.test_brightness.state|int < states.input_number.wakeup_max_brightness.state|int %}
            script.turn_on
          {% else %}
            script.turn_off
          {% endif %}
        data:
          entity_id: script.wakeup_room_light_turnon




  wakeup_room:
    alias: 'Wakeup'
    sequence:
      - service: input_number.set_value
        data_template:
          entity_id: input_number.test_volume
          value: 0

      - service: input_number.set_value
        data_template:
          entity_id: input_number.test_brightness
          value: 0

      - service: media_player.volume_set
        data_template:
          entity_id: media_player.schlafzimmer_speaker
          volume_level: '{{ states.input_number.test_volume.state|float }}'

      - service: media_player.play_media
        data_template:
          entity_id: media_player.schlafzimmer_speaker
          media_content_id: >
            {% if is_state("input_select.radio_wakeup", "Radio FM1") %} http://radiofm1.ice.infomaniak.ch/radiofm1-128.mp3
            {% elif is_state("input_select.radio_wakeup", "DI.fm Vocal Trance") %} http://prem2.di.fm:80/vocaltrance?e5610542b1780e1
            {% elif is_state("input_select.radio_wakeup", "Sky.fm Rock") %} http://prem2.radiotunes.com:80/hardrock_hi?e5610542b1780e1
            {% endif %}
          media_content_type: 'music'

      - service: script.turn_on
        entity_id: script.wakeup_room_sound_turnon

      - service: script.turn_on
        entity_id: script.wakeup_room_light_turnon

